{"version":3,"sources":["components/CircleSelector/index.jsx","components/Circles/index.jsx","App.js","serviceWorker.js","index.js"],"names":["CircleSelector","handleChange","selected","handleClick","e","document","getElementById","classList","remove","innerHTML","target","id","useEffect","add","className","onClick","Circles","class","App","useState","setSelected","num","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0SAyBeA,G,MAtBQ,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,SAC7BC,EAAc,SAACC,GACjBC,SAASC,eAAeJ,GAAUK,UAAUC,OAAO,YACnDH,SAASC,eAAeJ,GAAUO,UAAlC,wBAA+DP,GAC/DD,EAAaG,EAAEM,OAAOC,KAQ1B,OANAC,qBAAU,WACNP,SAASC,eAAeJ,GACvBK,UAAUM,IAAI,YACfR,SAASC,eAAeJ,GACvBO,UADD,iBACuBP,EADvB,gBAIA,yBAAKY,UAAU,kBACX,4BAAQH,GAAG,IAAII,QAASZ,EAAaW,UAAU,IAA/C,mBACA,4BAAQH,GAAG,IAAII,QAASZ,EAAaW,UAAU,IAA/C,mBACA,4BAAQH,GAAG,IAAII,QAASZ,EAAaW,UAAU,IAA/C,mBACA,4BAAQH,GAAG,IAAII,QAASZ,EAAaW,UAAU,IAA/C,sBCHGE,G,MAdC,SAAC,GAAgB,IAAfd,EAAc,EAAdA,SAId,OAHAU,qBAAU,WACNP,SAASC,eAAT,gBAAiCJ,IAAYK,UAAUM,IAAI,eAG3D,yBAAKI,MAAM,WACP,yBAAKN,GAAG,UAAUG,UAAU,IAA5B,KACA,yBAAKH,GAAG,UAAUG,UAAU,IAA5B,KACA,yBAAKH,GAAG,UAAUG,UAAU,IAA5B,KACA,yBAAKH,GAAG,UAAUG,UAAU,IAA5B,QCcGI,G,MApBH,WAAO,IAAD,EACgBC,mBAAS,KADzB,mBACTjB,EADS,KACCkB,EADD,KAQhB,OACE,yBAAKN,UAAU,OACb,4BAAQA,UAAU,cAAlB,2BACA,8BACE,kBAAC,EAAD,CAAgBb,aATD,SAACoB,GACpBhB,SAASC,eAAeJ,GAAUK,UAAUC,OAAO,YACnDH,SAASC,eAAT,gBAAiCJ,IAAYK,UAAUC,OAAO,YAC9DY,EAAYC,IAMoCnB,SAAUA,IACtD,kBAAC,EAAD,CAASA,SAAUA,IAFrB,yBCLcoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASvB,SAASC,eAAe,SD6H3C,kBAAmBuB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fd4cc6d7.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport './style.css';\n\nconst CircleSelector = ({handleChange, selected}) => {\n    const handleClick = (e) => {\n        document.getElementById(selected).classList.remove('selected');\n        document.getElementById(selected).innerHTML = `Select Circle ${selected}`;\n        handleChange(e.target.id);\n    }\n    useEffect(()=>{\n        document.getElementById(selected)\n        .classList.add('selected');\n        document.getElementById(selected)\n        .innerHTML = `Circle ${selected} selected`;\n    })\n    return (\n        <div className=\"CircleSelector\">\n            <button id=\"1\" onClick={handleClick} className=\"\">Select Circle 1</button>\n            <button id=\"2\" onClick={handleClick} className=\"\">Select Circle 2</button>\n            <button id=\"3\" onClick={handleClick} className=\"\">Select Circle 3</button>\n            <button id=\"4\" onClick={handleClick} className=\"\">Select Circle 4</button>\n        </div>\n    )\n}\n\nexport default CircleSelector;","import React, { useEffect } from 'react';\nimport './style.css';\n\nconst Circles = ({selected}) => {\n    useEffect(()=>{\n        document.getElementById(`Circle${selected}`).classList.add('selected')\n    })\n    return(\n        <div class=\"Circles\">\n            <div id=\"Circle1\" className=\"\">1</div>\n            <div id=\"Circle2\" className=\"\">2</div>\n            <div id=\"Circle3\" className=\"\">3</div>\n            <div id=\"Circle4\" className=\"\">4</div>\n        </div>\n    )\n}\n\nexport default Circles;","import React, { useState } from 'react';\nimport CircleSelector from './components/CircleSelector';\nimport Circles from './components/Circles';\n\nimport './App.css';\n\nconst App = () => {\n  const [selected, setSelected] = useState('2');\n\n  const handleChange = (num) => {\n    document.getElementById(selected).classList.remove('selected');\n    document.getElementById(`Circle${selected}`).classList.remove('selected')\n    setSelected(num)\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">UNIT 4 FINAL ASSESSMENT</header>\n      <main>\n        <CircleSelector handleChange={handleChange} selected={selected}/>\n        <Circles selected={selected}/>\n        By Tanner J Priest\n      </main>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}